name: Build & Publish

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.github/workflows/**'
      - 'RandExTest/**'

jobs:
  setup:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      buildnumber: ${{ steps.buildnumber.outputs.build_number }}
    steps:
      - name: Generate build number
        id: buildnumber
        uses: onyxmueller/build-tag-number@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Prepare Environment Variables
        shell: bash
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "BUILD_NUMBER=${{ needs.setup.outputs.buildnumber }}" >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore

      - name: Ignore RandExTest
        shell: bash
        run: |
          mv RandExTest RandExTest.ignore || echo "Ignored RandExTest"

      - name: Build and Pack NuGet Package
        run: |
          dotnet build RandEx/RandEx.csproj -c Release --no-restore /p:Version=1.0.${{ env.BUILD_NUMBER }}
          dotnet pack -c Release --no-build --output ./nupkg /p:Version=1.0.${{ env.BUILD_NUMBER }}

      - name: Check Artifacts
        run: |
          echo "Listing contents of nupkg directory"
          ls -la ./nupkg/

      - name: Publish to NuGet
        run: |
          dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY_RANDEX }} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Create Release Artifact (ZIP)
        run: |
          mkdir release
          cp -r bin/Release/net8.0/* ./release/
          cd release
          zip -r ../RandEx-v${{ env.BUILD_NUMBER }}-${{ env.GITHUB_SHA_SHORT }}.zip *

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ env.BUILD_NUMBER }}
          release_name: v1.0.${{ env.BUILD_NUMBER }}
          draft: false
          prerelease: false
          body: | 
            `${{ github.event.head_commit.message }}`

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./RandEx-v${{ env.BUILD_NUMBER }}-${{ env.GITHUB_SHA_SHORT }}.zip
          asset_name: RandEx-v${{ env.BUILD_NUMBER }}-${{ env.GITHUB_SHA_SHORT }}.zip
          asset_content_type: application/zip
